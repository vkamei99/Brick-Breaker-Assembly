     1                                  segment code
     2                                  ..start:
     3 00000000 B8[0000]                    mov         ax,data
     4 00000003 8ED8                        mov         ds,ax
     5 00000005 B8[0000]                    mov         ax,stack
     6 00000008 8ED0                        mov         ss,ax
     7 0000000A BC[0002]                    mov         sp,stacktop
     8                                  
     9                                  ; salvar modo corrente de video(vendo como est� o modo de video da maquina)
    10 0000000D B40F                        mov         ah,0Fh
    11 0000000F CD10                        int         10h
    12 00000011 A2[0100]                    mov         [modo_anterior],al   
    13                                  
    14                                  ; alterar modo de video para gr�fico 640x480 16 cores
    15 00000014 B012                        mov         al,12h
    16 00000016 B400                        mov         ah,0
    17 00000018 CD10                        int         10h
    18                                          
    19                                  ;desenha circulos poe a bola no meio da tela
    20 0000001A 31F6                        xor si, si
    21 0000001C 31FF                        xor di, di
    22 0000001E B90008                      mov cx, 0800h
    23 00000021 BE3F01                      mov si, 319
    24 00000024 BFF000                      mov di, 240
    25                                  
    26                                      ;escrever o cabecalho
    27 00000027 B93800                      mov     cx,56			;numero de caracteres
    28 0000002A BB0000                      mov     bx,0
    29 0000002D B601                        mov     dh,1			;linha 0-29
    30 0000002F B201                        mov     dl,1 			;coluna 0-79
    31 00000031 C606[0000]07            	mov	    byte[cor],branco
    32                                  
    33                                  show_title:
    34 00000036 E88903                  	call    cursor
    35 00000039 8A87[2200]                  mov     al,[bx+title]
    36 0000003D E89903                  	call    caracter
    37 00000040 43                          inc     bx	                ;proximo caracter
    38 00000041 FEC2                    	inc 	dl	                ;avanca a coluna
    39 00000043 E2F1                        loop    show_title
    40                                  
    41 00000045 B93800                      mov     cx,56			;numero de caracteres
    42 00000048 BB0000                      mov     bx,0
    43 0000004B B602                        mov     dh,2			;linha 0-29
    44 0000004D B201                        mov     dl,1 			;coluna 0-79
    45 0000004F C606[0000]07            	mov	   byte[cor],branco
    46                                  
    47                                  show_stats:
    48 00000054 E86B03                  	call    cursor
    49 00000057 8A87[5A00]                  mov     al,[bx+stats]
    50 0000005B E87B03                  	call    caracter
    51 0000005E 43                          inc     bx	                ;proximo caracter
    52 0000005F FEC2                    	inc  	dl	                ;avanca a coluna
    53 00000061 E2F1                        loop    show_stats
    54                                      
    55                                  
    56                                  ;desenhar retas
    57                                  
    58 00000063 E80000                      call    desenha_layout
    59                                  
    60                                  desenha_layout:
    61 00000066 C606[0000]0F                mov     byte[cor],branco_intenso    ;baixo
    62 0000006B B80000                      mov     ax,0
    63 0000006E 50                          push        ax
    64 0000006F B80000                      mov     ax,0
    65 00000072 50                          push        ax
    66 00000073 B87F02                      mov     ax,639
    67 00000076 50                          push        ax
    68 00000077 B80000                      mov     ax,0
    69 0000007A 50                          push        ax
    70 0000007B E83B05                      call        line
    71                                  
    72                                  
    73 0000007E C606[0000]0F                mov     byte[cor],branco_intenso    ;esquerda
    74 00000083 B80000                      mov     ax,0
    75 00000086 50                          push        ax
    76 00000087 B80000                      mov     ax,0
    77 0000008A 50                          push        ax
    78 0000008B B80000                      mov     ax,0
    79 0000008E 50                          push        ax
    80 0000008F B8DF01                      mov     ax,479
    81 00000092 50                          push        ax
    82 00000093 E82305                      call        line
    83                                  
    84 00000096 C606[0000]0F                mov     byte[cor],branco_intenso    ;cima
    85 0000009B B80000                      mov     ax,0
    86 0000009E 50                          push        ax
    87 0000009F B8DF01                      mov     ax,479
    88 000000A2 50                          push        ax
    89 000000A3 B87F02                      mov     ax,639
    90 000000A6 50                          push        ax
    91 000000A7 B8DF01                      mov     ax,479
    92 000000AA 50                          push        ax
    93 000000AB E80B05                      call        line
    94                                  
    95 000000AE C606[0000]0F                mov     byte[cor],branco_intenso    ;direita
    96 000000B3 B87F02                      mov     ax,639
    97 000000B6 50                          push        ax
    98 000000B7 B80000                      mov     ax,0
    99 000000BA 50                          push        ax
   100 000000BB B87F02                      mov     ax,639
   101 000000BE 50                          push        ax
   102 000000BF B8DF01                      mov     ax,479
   103 000000C2 50                          push        ax
   104 000000C3 E8F304                      call        line
   105                                  
   106 000000C6 C606[0000]0F                mov     byte[cor],branco_intenso    ;cabecalho
   107 000000CB B80000                      mov     ax,0
   108 000000CE 50                          push        ax
   109 000000CF B8AE01                      mov     ax,430
   110 000000D2 50                          push        ax
   111 000000D3 B88002                      mov     ax, 640
   112 000000D6 50                          push        ax
   113 000000D7 B8AE01                      mov     ax,430
   114 000000DA 50                          push        ax
   115 000000DB E8DB04                      call        line         
   116                                  
   117                                  volta:
   118                                      ; Desenhar a bola
   119 000000DE C606[0000]05                mov     byte[cor],magenta  
   120 000000E3 89F0                        mov     ax, si
   121 000000E5 50                          push        ax
   122 000000E6 89F8                        mov     ax, di
   123 000000E8 50                          push        ax
   124 000000E9 B80A00                      mov     ax,10
   125 000000EC 50                          push        ax
   126 000000ED E80C04                      call    full_circle
   127                                  
   128 000000F0 B86400                      mov ax, 100 ; Por exemplo, 1000 ms (1 segundo).
   129 000000F3 B486                        mov ah, 86h
   130 000000F5 CD15                        int 15h
   131                                  
   132 000000F7 58                          pop ax
   133 000000F8 58                          pop ax
   134 000000F9 58                          pop ax
   135                                  
   136                                      ; Limpar a bola anterior (desenhar a bola em preto para apagar)
   137 000000FA C606[0000]00                mov     byte[cor],preto 
   138 000000FF 89F0                        mov     ax, si
   139 00000101 50                          push        ax
   140 00000102 89F8                        mov     ax, di
   141 00000104 50                          push        ax
   142 00000105 B80A00                      mov     ax,10
   143 00000108 50                          push        ax
   144 00000109 E8F003                      call    full_circle
   145 0000010C 58                          pop ax
   146 0000010D 58                          pop ax
   147 0000010E 58                          pop ax
   148                                  
   149                                      ;barra horizontal
   150 0000010F C606[0000]0F                mov     byte[cor],branco_intenso    
   151 00000114 A1[AF00]                    mov     ax, word[x_barra]
   152 00000117 50                          push        ax
   153 00000118 A1[B300]                    mov     ax, word[y_barra]
   154 0000011B 50                          push        ax
   155 0000011C A1[B100]                    mov     ax, word[x_barra_end]
   156 0000011F 50                          push        ax
   157 00000120 A1[B300]                    mov     ax, word[y_barra]
   158 00000123 50                          push        ax
   159 00000124 E89204                      call        line
   160 00000127 58                          pop ax
   161 00000128 58                          pop ax
   162 00000129 58                          pop ax
   163                                      
   164                                      ; Atualizar a posição da bola
   165 0000012A 0336[1A00]                  add si, word[vx]
   166 0000012E 033E[1C00]                  add di, word[vy]
   167                                  
   168                                      ; Verificar colisões com as bordas
   169 00000132 81FE7002                    cmp     si, 624
   170 00000136 7D45                        jge     colisao_direita
   171                                  
   172 00000138 81FE1000                    cmp     si, 16
   173 0000013C 7E56                        jle     colisao_esquerda
   174                                  
   175 0000013E 81FF9E01                    cmp     di, 414
   176 00000142 7D49                        jge     colisao_cima
   177                                  
   178 00000144 81FF1000                    cmp     di, 16
   179 00000148 7E51                        jle     colisao_baixo
   180                                  
   181 0000014A B401                        mov ah,01h
   182 0000014C CD16                    	int 16h
   183 0000014E 7505                    	jnz jmp_tecla
   184 00000150 E80800                      call colisao_barra
   185                                  
   186 00000153 E289                    loop volta
   187                                  
   188                                  jmp_tecla:
   189 00000155 E9A200                      jmp check_com
   190                                  
   191                                  jmp_boost2:
   192 00000158 E983FF                      jmp volta
   193                                  
   194                                  ;funções de colisão abaixo
   195                                  colisao_barra:      
   196                                  
   197 0000015B 81FF3200                    cmp di, 50
   198 0000015F 7FF7                        jg jmp_boost2
   199                                  
   200 00000161 3B36[AF00]                  cmp si,word[x_barra]
   201 00000165 7CF1                        jl jmp_boost2
   202                                  
   203 00000167 3B36[B100]                  cmp si,word[x_barra_end]
   204 0000016B 7FEB                        jg jmp_boost2
   205                                  
   206 0000016D F71E[1C00]                  neg word[vy]
   207 00000171 8106[B500]0100              add word[unidades_jogador],1 
   208 00000177 E81A01                      call update_texto_pontos_jogador_un
   209                                      
   210 0000017A E961FF                      jmp volta
   211                                  
   212                                  colisao_direita:
   213 0000017D F71E[1A00]                  neg word[vx]
   214 00000181 8106[B700]0100              add word[unidades_computador],1
   215 00000187 E88901                      call update_texto_pontos_computador_un  
   216 0000018A E951FF                      jmp volta   
   217                                  
   218                                  colisao_cima:
   219 0000018D F71E[1C00]                  neg word[vy]
   220 00000191 E94AFF                      jmp volta
   221                                  
   222                                  colisao_esquerda:
   223 00000194 F71E[1A00]                  neg word[vx]
   224 00000198 E943FF                      jmp volta  
   225                                  
   226                                  colisao_baixo:
   227 0000019B B91A00                      mov     	cx,26			;n�mero de caracteres
   228 0000019E BB0000                      mov     	bx,0
   229 000001A1 B60E                        mov     	dh,14			;linha 0-29
   230 000001A3 B21A                        mov     	dl,26			;coluna 0-79
   231 000001A5 C606[0000]04                mov		byte[cor],vermelho
   232                                  
   233                                  game_over:
   234 000001AA E81502                      call    cursor
   235 000001AD 8A87[9200]                  mov     al,[bx+fim]
   236 000001B1 E82502                      call    caracter
   237 000001B4 43                          inc     bx                  ;proximo caracter
   238 000001B5 FEC2                        inc     dl                  ;avanca a coluna
   239 000001B7 E2F1                        loop    game_over
   240                                      
   241                                  esperar_entrada:
   242 000001B9 B400                        mov ah,00h
   243 000001BB CD16                        int 16h
   244                                  
   245 000001BD 3C6E                        cmp al,6Eh ;'n' -> Sair
   246 000001BF 7460                        je sair 
   247 000001C1 3C4E                        cmp al,4Eh ;'N' -> Sair
   248 000001C3 745C                        je sair 
   249                                  
   250 000001C5 E9F1FF                      jmp esperar_entrada
   251                                  
   252                                  pause:
   253 000001C8 813E[1A00]0000              cmp word[vx], 0
   254 000001CE 741B                        je unpause      
   255                                  
   256 000001D0 A1[1A00]                    mov ax, word[vx]
   257 000001D3 A3[1E00]                    mov word[saved_vx], ax
   258 000001D6 A1[1C00]                    mov ax, word[vy]
   259 000001D9 A3[2000]                    mov word[saved_vy], ax
   260                                  
   261 000001DC C706[1A00]0000              mov word[vx], 0
   262 000001E2 C706[1C00]0000              mov word[vy], 0
   263 000001E8 E9F3FE                      jmp volta
   264                                  
   265                                  unpause:
   266 000001EB A1[1E00]                    mov ax, word[saved_vx]
   267 000001EE A3[1A00]                    mov word[vx], ax
   268 000001F1 A1[2000]                    mov ax, word[saved_vy]
   269 000001F4 A3[1C00]                    mov word[vy], ax
   270 000001F7 E9E4FE                      jmp volta
   271                                  
   272                                  check_com: ;checa tecla
   273 000001FA B400                        mov ah,00h
   274 000001FC CD16                        int 16h
   275                                      
   276 000001FE 3C41                        cmp al,41h ;'A' -> Move para esquerda
   277 00000200 742B                        je PADDLE_LEFT
   278 00000202 3C61                        cmp al,61h ;'a'
   279 00000204 7427                        je PADDLE_LEFT
   280                                      
   281 00000206 3C44                        cmp al,44h ;'D' -> Move para direita
   282 00000208 7455                        je PADDLE_RIGHT
   283 0000020A 3C64                        cmp al,64h ;'d'
   284 0000020C 7451                        je PADDLE_RIGHT
   285                                  
   286 0000020E 3C50                        cmp al,50h ;'P' -> Move para direita
   287 00000210 74B6                        je pause
   288 00000212 3C70                        cmp al,70h ;'p'
   289 00000214 74B2                        je pause
   290                                  
   291 00000216 3C53                        cmp al,53h ;'S' -> Sair
   292 00000218 7407                        je sair
   293 0000021A 3C73                        cmp al,73h ;'s'
   294 0000021C 7403                        je sair
   295                                  
   296 0000021E E9BDFE                      jmp volta
   297                                  
   298                                  sair:
   299 00000221 B400                        mov ah,0 ; set video mode
   300 00000223 A0[0100]                    mov al,[modo_anterior] ; recupera o modo anterior
   301 00000226 CD10                        int 10h
   302 00000228 B8004C                      mov ax,4c00h
   303 0000022B CD21                        int 21h
   304                                  
   305                                  PADDLE_LEFT: ; Move barra para a esquerda
   306 0000022D 813E[AF00]0A00              cmp word[x_barra],10
   307 00000233 7E5C                        jle jmp_boost
   308                                  
   309 00000235 C606[0000]00                mov     byte[cor],preto   ; apaga barra
   310 0000023A A1[AF00]                    mov     ax, word[x_barra]
   311 0000023D 50                          push    ax
   312 0000023E A1[B300]                    mov     ax, word[y_barra]
   313 00000241 50                          push    ax
   314 00000242 A1[B100]                    mov     ax, word[x_barra_end]
   315 00000245 50                          push    ax
   316 00000246 A1[B300]                    mov     ax, word[y_barra]
   317 00000249 50                          push    ax
   318 0000024A E86C03                      call    line
   319 0000024D 58                          pop ax
   320 0000024E 58                          pop ax
   321 0000024F 58                          pop ax
   322                                  
   323 00000250 812E[AF00]0A00              sub word[x_barra], 10
   324 00000256 812E[B100]0A00              sub word[x_barra_end], 10
   325                                  
   326 0000025C E97FFE                      jmp volta
   327                                  
   328                                  PADDLE_RIGHT: ; Move barra para a direita
   329 0000025F 813E[B100]7502              cmp word[x_barra_end],629
   330 00000265 7D2A                        jge jmp_boost
   331                                  
   332 00000267 C606[0000]00                mov     byte[cor],preto   ; apaga barra
   333 0000026C A1[AF00]                    mov     ax, word[x_barra]
   334 0000026F 50                          push    ax
   335 00000270 A1[B300]                    mov     ax, word[y_barra]
   336 00000273 50                          push    ax
   337 00000274 A1[B100]                    mov     ax, word[x_barra_end]
   338 00000277 50                          push    ax
   339 00000278 A1[B300]                    mov     ax, word[y_barra]
   340 0000027B 50                          push    ax
   341 0000027C E83A03                      call    line
   342 0000027F 58                          pop ax
   343 00000280 58                          pop ax
   344 00000281 58                          pop ax
   345                                  
   346 00000282 8106[AF00]0A00              add word[x_barra], 10
   347 00000288 8106[B100]0A00              add word[x_barra_end], 10
   348                                  
   349 0000028E E94DFE                      jmp volta
   350                                  
   351                                  jmp_boost:
   352 00000291 E94AFE                      jmp volta
   353                                  
   354                                  ;=========================================================;
   355                                  ;                 Funções Update placar                   ;
   356                                  ;=========================================================;
   357                                  
   358                                  update_texto_pontos_jogador_un:
   359 00000294 31C0                        xor ax,ax
   360 00000296 A0[B500]                    mov al,[unidades_jogador] 
   361                                  
   362 00000299 3C0A                        cmp al,10
   363 0000029B 742A                        je update_texto_pontos_jogador_de
   364                                      
   365 0000029D 0430                        add al,30h                       
   366 0000029F A2[B900]                    mov [texto_pontos_jogador],al
   367                                  
   368 000002A2 B90100                      mov     cx,1			;numero de caracteres
   369 000002A5 BB0000                      mov     bx,0
   370 000002A8 B602                        mov     dh,2			;linha 0-29
   371 000002AA B212                        mov     dl,18 			;coluna 0-79
   372 000002AC C606[0000]0C            	mov	   byte[cor],rosa
   373                                  
   374 000002B1 E80300                      call un_jogador
   375 000002B4 E927FE                      jmp volta
   376                                      
   377                                  
   378                                  un_jogador:
   379 000002B7 E80801                  	call    cursor
   380 000002BA 8A87[B900]                  mov     al,[bx+texto_pontos_jogador]
   381 000002BE E81801                  	call    caracter
   382 000002C1 4B                          dec     bx	                ;proximo caracter
   383 000002C2 FEC2                    	inc  	dl	                ;avanca a coluna
   384 000002C4 E2F1                        loop    un_jogador
   385 000002C6 C3                          ret
   386                                  
   387                                  update_texto_pontos_jogador_de:
   388 000002C7 31C0                        xor ax,ax
   389 000002C9 8006[B600]01                add byte[dezenas_jogador],1
   390                                  
   391 000002CE A0[B600]                    mov al, [dezenas_jogador]
   392                                  
   393 000002D1 0430                        add al,30h                       
   394 000002D3 A2[B900]                    mov [texto_pontos_jogador],al
   395                                  
   396 000002D6 B90100                      mov     cx,1			;numero de caracteres
   397 000002D9 BB0000                      mov     bx,0
   398 000002DC B602                        mov     dh,2			;linha 0-29
   399 000002DE B211                        mov     dl,17 			;coluna 0-79
   400 000002E0 C606[0000]0C            	mov	   byte[cor],rosa
   401                                  
   402 000002E5 E80B00                      call de_jogador
   403 000002E8 31C0                        xor ax,ax
   404 000002EA C606[B500]00                mov byte[unidades_jogador], 0
   405 000002EF E9A2FF                      jmp update_texto_pontos_jogador_un
   406 000002F2 C3                          ret
   407                                  
   408                                  de_jogador:
   409 000002F3 E8CC00                      call    cursor
   410 000002F6 8A87[B900]                  mov     al,[bx+texto_pontos_jogador]
   411 000002FA E8DC00                  	call    caracter
   412 000002FD 4B                          dec     bx	                ;proximo caracter
   413 000002FE FEC2                    	inc  	dl	                ;avanca a coluna
   414 00000300 E2F1                        loop    de_jogador
   415 00000302 C3                          ret
   416                                  
   417                                  un_computador:
   418 00000303 E8BC00                  	call    cursor
   419 00000306 8A87[BB00]                  mov     al,[bx+texto_pontos_computador]
   420 0000030A E8CC00                  	call    caracter
   421 0000030D 4B                          dec     bx	                ;proximo caracter
   422 0000030E FEC2                    	inc  	dl	                ;avanca a coluna
   423 00000310 E2F1                        loop    un_computador
   424 00000312 C3                          ret
   425                                  
   426                                  update_texto_pontos_computador_un:
   427 00000313 31C0                        xor ax,ax
   428 00000315 A0[B700]                    mov al,[unidades_computador]
   429                                  
   430 00000318 3C0A                        cmp al,10
   431 0000031A 742A                        je update_texto_pontos_computador_de 
   432                                  
   433 0000031C 0430                        add al,30h                       
   434 0000031E A2[BB00]                    mov [texto_pontos_computador],al
   435                                  
   436 00000321 B90100                      mov     cx,1			;numero de caracteres
   437 00000324 BB0000                      mov     bx,0
   438 00000327 B602                        mov     dh,2			;linha 0-29
   439 00000329 B217                        mov     dl,23 			;coluna 0-79
   440 0000032B C606[0000]0C            	mov	   byte[cor],rosa
   441                                  
   442 00000330 E8D0FF                      call un_computador
   443 00000333 E9A8FD                      jmp volta
   444                                  
   445                                  de_computador:
   446 00000336 E88900                      call    cursor
   447 00000339 8A87[BB00]                  mov     al,[bx+texto_pontos_computador]
   448 0000033D E89900                  	call    caracter
   449 00000340 4B                          dec     bx	                ;proximo caracter
   450 00000341 FEC2                    	inc  	dl	                ;avanca a coluna
   451 00000343 E2F1                        loop    de_computador
   452 00000345 C3                          ret
   453                                  
   454                                  update_texto_pontos_computador_de:
   455 00000346 31C0                        xor ax,ax
   456 00000348 8006[B800]01                add byte[dezenas_computador],1
   457                                  
   458 0000034D A0[B800]                    mov al, [dezenas_computador]
   459                                  
   460 00000350 0430                        add al,30h                       
   461 00000352 A2[BB00]                    mov [texto_pontos_computador],al
   462                                  
   463 00000355 B90100                      mov     cx,1			;numero de caracteres
   464 00000358 BB0000                      mov     bx,0
   465 0000035B B602                        mov     dh,2			;linha 0-29
   466 0000035D B216                        mov     dl,22 			;coluna 0-79
   467 0000035F C606[0000]0C            	mov	   byte[cor],rosa
   468                                  
   469 00000364 E8CFFF                      call de_computador
   470 00000367 31C0                        xor ax,ax
   471 00000369 C606[B700]00                mov byte[unidades_computador], 0
   472 0000036E E9A2FF                      jmp update_texto_pontos_computador_un
   473 00000371 C3                          ret
   474                                  
   475                                  ;=========================================================;
   476                                  
   477                                  ;=========================================================;
   478                                  ;                Update Display Velocidade                ;
   479                                  ;=========================================================;
   480                                  
   481                                  display_vel:
   482 00000372 E84D00                      call    cursor
   483 00000375 8A87[AD00]                  mov     al,[bx+texto_vel_display]
   484 00000379 E85D00                  	call    caracter
   485 0000037C 4B                          dec     bx	                ;proximo caracter
   486 0000037D FEC2                    	inc  	dl	                ;avanca a coluna
   487 0000037F E2F1                        loop display_vel
   488 00000381 C3                          ret
   489                                  
   490                                  update_veldisp:
   491 00000382 31C0                        xor ax,ax
   492 00000384 A0[AC00]                    mov al,byte[vel_display] 
   493                                      
   494 00000387 0430                        add al,30h                       
   495 00000389 A2[AD00]                    mov [texto_vel_display],al
   496                                  
   497 0000038C B90100                      mov     cx,1			;numero de caracteres
   498 0000038F BB0000                      mov     bx,0
   499 00000392 B602                        mov     dh,2			;linha 0-29
   500 00000394 B235                        mov     dl,53 			;coluna 0-79
   501 00000396 C606[0000]0C            	mov	   byte[cor],rosa
   502                                  
   503 0000039B E8D4FF                      call display_vel               
   504 0000039E C3                          ret
   505                                  
   506                                  
   507                                  ;===============================================================================================================;
   508                                  
   509                                  l4:
   510 0000039F E82000                      call    cursor
   511 000003A2 8A87[0A00]                  mov     al,[bx+mens]
   512 000003A6 E83000                      call    caracter
   513 000003A9 43                          inc     bx                  ;proximo caracter
   514 000003AA FEC2                        inc     dl                  ;avanca a coluna
   515 000003AC FE06[0000]                  inc     byte [cor]          ;mudar a cor para a seguinte
   516 000003B0 E2ED                        loop    l4
   517                                      
   518 000003B2 B408                        mov     ah,08h
   519 000003B4 CD21                        int     21h
   520 000003B6 B400                        mov     ah,0                    ; set video mode
   521 000003B8 A0[0100]                    mov     al,[modo_anterior]      ; modo anterior
   522 000003BB CD10                        int     10h
   523 000003BD B8004C                      mov     ax,4c00h
   524 000003C0 CD21                        int     21h
   525                                  
   526                                  ;***************************************************************************
   527                                  ;
   528                                  ;   fun��o cursor
   529                                  ;
   530                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   531                                  cursor:
   532 000003C2 9C                          pushf
   533 000003C3 50                          push        ax
   534 000003C4 53                          push        bx
   535 000003C5 51                          push        cx
   536 000003C6 52                          push        dx
   537 000003C7 56                          push        si
   538 000003C8 57                          push        di
   539 000003C9 55                          push        bp
   540 000003CA B402                        mov         ah,2
   541 000003CC B700                        mov         bh,0
   542 000003CE CD10                        int         10h
   543 000003D0 5D                          pop     bp
   544 000003D1 5F                          pop     di
   545 000003D2 5E                          pop     si
   546 000003D3 5A                          pop     dx
   547 000003D4 59                          pop     cx
   548 000003D5 5B                          pop     bx
   549 000003D6 58                          pop     ax
   550 000003D7 9D                          popf
   551 000003D8 C3                          ret
   552                                  ;_____________________________________________________________________________
   553                                  ;
   554                                  ;   fun��o caracter escrito na posi��o do cursor
   555                                  ;
   556                                  ; al= caracter a ser escrito
   557                                  ; cor definida na variavel cor
   558                                  caracter:
   559 000003D9 9C                          pushf
   560 000003DA 50                          push        ax
   561 000003DB 53                          push        bx
   562 000003DC 51                          push        cx
   563 000003DD 52                          push        dx
   564 000003DE 56                          push        si
   565 000003DF 57                          push        di
   566 000003E0 55                          push        bp
   567 000003E1 B409                        mov         ah,9
   568 000003E3 B700                        mov         bh,0
   569 000003E5 B90100                      mov         cx,1
   570 000003E8 8A1E[0000]                  mov         bl,[cor]
   571 000003EC CD10                        int         10h
   572 000003EE 5D                          pop     bp
   573 000003EF 5F                          pop     di
   574 000003F0 5E                          pop     si
   575 000003F1 5A                          pop     dx
   576 000003F2 59                          pop     cx
   577 000003F3 5B                          pop     bx
   578 000003F4 58                          pop     ax
   579 000003F5 9D                          popf
   580 000003F6 C3                          ret
   581                                  ;_____________________________________________________________________________
   582                                  ;
   583                                  ;   fun��o plot_xy
   584                                  ;
   585                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   586                                  ; cor definida na variavel cor
   587                                  plot_xy:
   588 000003F7 55                          push        bp
   589 000003F8 89E5                        mov         bp,sp
   590 000003FA 9C                          pushf
   591 000003FB 50                          push        ax
   592 000003FC 53                          push        bx
   593 000003FD 51                          push        cx
   594 000003FE 52                          push        dx
   595 000003FF 56                          push        si
   596 00000400 57                          push        di
   597 00000401 B40C                        mov         ah,0ch
   598 00000403 A0[0000]                    mov         al,[cor]
   599 00000406 B700                        mov         bh,0
   600 00000408 BADF01                      mov         dx,479
   601 0000040B 2B5604                      sub         dx,[bp+4]
   602 0000040E 8B4E06                      mov         cx,[bp+6]
   603 00000411 CD10                        int         10h
   604 00000413 5F                          pop     di
   605 00000414 5E                          pop     si
   606 00000415 5A                          pop     dx
   607 00000416 59                          pop     cx
   608 00000417 5B                          pop     bx
   609 00000418 58                          pop     ax
   610 00000419 9D                          popf
   611 0000041A 5D                          pop     bp
   612 0000041B C20400                      ret     4
   613                                  ;_____________________________________________________________________________
   614                                  ;    fun��o circle
   615                                  ;    push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   616                                  ;   cor definida na variavel cor
   617                                  circle:
   618 0000041E 55                          push    bp
   619 0000041F 89E5                        mov     bp,sp
   620 00000421 9C                          pushf                        ;coloca os flags na pilha
   621 00000422 50                          push    ax
   622 00000423 53                          push    bx
   623 00000424 51                          push    cx
   624 00000425 52                          push    dx
   625 00000426 56                          push    si
   626 00000427 57                          push    di
   627                                      
   628 00000428 8B4608                      mov     ax,[bp+8]    ; resgata xc
   629 0000042B 8B5E06                      mov     bx,[bp+6]    ; resgata yc
   630 0000042E 8B4E04                      mov     cx,[bp+4]    ; resgata r
   631                                      
   632 00000431 89DA                        mov     dx,bx   
   633 00000433 01CA                        add     dx,cx       ;ponto extremo superior
   634 00000435 50                          push    ax          
   635 00000436 52                          push    dx
   636 00000437 E8BDFF                      call plot_xy
   637                                      
   638 0000043A 89DA                        mov     dx,bx
   639 0000043C 29CA                        sub     dx,cx       ;ponto extremo inferior
   640 0000043E 50                          push    ax          
   641 0000043F 52                          push    dx
   642 00000440 E8B4FF                      call plot_xy
   643                                      
   644 00000443 89C2                        mov     dx,ax   
   645 00000445 01CA                        add     dx,cx       ;ponto extremo direita
   646 00000447 52                          push    dx          
   647 00000448 53                          push    bx
   648 00000449 E8ABFF                      call plot_xy
   649                                      
   650 0000044C 89C2                        mov     dx,ax
   651 0000044E 29CA                        sub     dx,cx       ;ponto extremo esquerda
   652 00000450 52                          push    dx          
   653 00000451 53                          push    bx
   654 00000452 E8A2FF                      call plot_xy
   655                                          
   656 00000455 89CF                        mov     di,cx
   657 00000457 81EF0100                    sub     di,1     ;di=r-1
   658 0000045B BA0000                      mov     dx,0    ;dx ser� a vari�vel x. cx � a variavel y
   659                                      
   660                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   661                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   662                                  ;valores positivos para d
   663                                  
   664                                  stay:               ;loop
   665 0000045E 89FE                        mov     si,di
   666 00000460 81FE0000                    cmp     si,0
   667 00000464 7F0E                        jg      inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   668 00000466 89D6                        mov     si,dx       ;o jl � importante porque trata-se de conta com sinal
   669 00000468 D1E6                        sal     si,1        ;multiplica por doi (shift arithmetic left)
   670 0000046A 81C60300                    add     si,3
   671 0000046E 01F7                        add     di,si     ;nesse ponto d=d+2*dx+3
   672 00000470 42                          inc     dx      ;incrementa dx
   673 00000471 E90E00                      jmp     plotar
   674                                  inf:    
   675 00000474 89D6                        mov     si,dx
   676 00000476 29CE                        sub     si,cx       ;faz x - y (dx-cx), e salva em di 
   677 00000478 D1E6                        sal     si,1
   678 0000047A 81C60500                    add     si,5
   679 0000047E 01F7                        add     di,si       ;nesse ponto d=d+2*(dx-cx)+5
   680 00000480 42                          inc     dx      ;incrementa x (dx)
   681 00000481 49                          dec     cx      ;decrementa y (cx)
   682                                      
   683                                  plotar: 
   684 00000482 89D6                        mov     si,dx
   685 00000484 01C6                        add     si,ax
   686 00000486 56                          push    si          ;coloca a abcisa x+xc na pilha
   687 00000487 89CE                        mov     si,cx
   688 00000489 01DE                        add     si,bx
   689 0000048B 56                          push    si          ;coloca a ordenada y+yc na pilha
   690 0000048C E868FF                      call plot_xy        ;toma conta do segundo octante
   691 0000048F 89C6                        mov     si,ax
   692 00000491 01D6                        add     si,dx
   693 00000493 56                          push    si          ;coloca a abcisa xc+x na pilha
   694 00000494 89DE                        mov     si,bx
   695 00000496 29CE                        sub     si,cx
   696 00000498 56                          push    si          ;coloca a ordenada yc-y na pilha
   697 00000499 E85BFF                      call plot_xy        ;toma conta do s�timo octante
   698 0000049C 89C6                        mov     si,ax
   699 0000049E 01CE                        add     si,cx
   700 000004A0 56                          push    si          ;coloca a abcisa xc+y na pilha
   701 000004A1 89DE                        mov     si,bx
   702 000004A3 01D6                        add     si,dx
   703 000004A5 56                          push    si          ;coloca a ordenada yc+x na pilha
   704 000004A6 E84EFF                      call plot_xy        ;toma conta do segundo octante
   705 000004A9 89C6                        mov     si,ax
   706 000004AB 01CE                        add     si,cx
   707 000004AD 56                          push    si          ;coloca a abcisa xc+y na pilha
   708 000004AE 89DE                        mov     si,bx
   709 000004B0 29D6                        sub     si,dx
   710 000004B2 56                          push    si          ;coloca a ordenada yc-x na pilha
   711 000004B3 E841FF                      call plot_xy        ;toma conta do oitavo octante
   712 000004B6 89C6                        mov     si,ax
   713 000004B8 29D6                        sub     si,dx
   714 000004BA 56                          push    si          ;coloca a abcisa xc-x na pilha
   715 000004BB 89DE                        mov     si,bx
   716 000004BD 01CE                        add     si,cx
   717 000004BF 56                          push    si          ;coloca a ordenada yc+y na pilha
   718 000004C0 E834FF                      call plot_xy        ;toma conta do terceiro octante
   719 000004C3 89C6                        mov     si,ax
   720 000004C5 29D6                        sub     si,dx
   721 000004C7 56                          push    si          ;coloca a abcisa xc-x na pilha
   722 000004C8 89DE                        mov     si,bx
   723 000004CA 29CE                        sub     si,cx
   724 000004CC 56                          push    si          ;coloca a ordenada yc-y na pilha
   725 000004CD E827FF                      call plot_xy        ;toma conta do sexto octante
   726 000004D0 89C6                        mov     si,ax
   727 000004D2 29CE                        sub     si,cx
   728 000004D4 56                          push    si          ;coloca a abcisa xc-y na pilha
   729 000004D5 89DE                        mov     si,bx
   730 000004D7 29D6                        sub     si,dx
   731 000004D9 56                          push    si          ;coloca a ordenada yc-x na pilha
   732 000004DA E81AFF                      call plot_xy        ;toma conta do quinto octante
   733 000004DD 89C6                        mov     si,ax
   734 000004DF 29CE                        sub     si,cx
   735 000004E1 56                          push    si          ;coloca a abcisa xc-y na pilha
   736 000004E2 89DE                        mov     si,bx
   737 000004E4 01D6                        add     si,dx
   738 000004E6 56                          push    si          ;coloca a ordenada yc-x na pilha
   739 000004E7 E80DFF                      call plot_xy        ;toma conta do quarto octante
   740                                      
   741 000004EA 39D1                        cmp     cx,dx
   742 000004EC 7203                        jb      fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
   743 000004EE E96DFF                      jmp     stay        ;se cx (y) est� acima de dx (x), continua no loop
   744                                      
   745                                      
   746                                  fim_circle:
   747 000004F1 5F                          pop     di
   748 000004F2 5E                          pop     si
   749 000004F3 5A                          pop     dx
   750 000004F4 59                          pop     cx
   751 000004F5 5B                          pop     bx
   752 000004F6 58                          pop     ax
   753 000004F7 9D                          popf
   754 000004F8 5D                          pop     bp
   755 000004F9 C20600                      ret     6
   756                                  ;-----------------------------------------------------------------------------
   757                                  ;    fun��o full_circle
   758                                  ;    push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   759                                  ; cor definida na variavel cor                    
   760                                  full_circle:
   761 000004FC 55                          push    bp
   762 000004FD 89E5                        mov     bp,sp
   763 000004FF 9C                          pushf                        ;coloca os flags na pilha
   764 00000500 50                          push    ax
   765 00000501 53                          push    bx
   766 00000502 51                          push    cx
   767 00000503 52                          push    dx
   768 00000504 56                          push    si
   769 00000505 57                          push    di
   770                                  
   771 00000506 8B4608                      mov     ax,[bp+8]    ; resgata xc
   772 00000509 8B5E06                      mov     bx,[bp+6]    ; resgata yc
   773 0000050C 8B4E04                      mov     cx,[bp+4]    ; resgata r
   774                                      
   775 0000050F 89DE                        mov     si,bx
   776 00000511 29CE                        sub     si,cx
   777 00000513 50                          push    ax          ;coloca xc na pilha         
   778 00000514 56                          push    si          ;coloca yc-r na pilha
   779 00000515 89DE                        mov     si,bx
   780 00000517 01CE                        add     si,cx
   781 00000519 50                          push    ax      ;coloca xc na pilha
   782 0000051A 56                          push    si      ;coloca yc+r na pilha
   783 0000051B E89B00                      call line
   784                                      
   785                                          
   786 0000051E 89CF                        mov     di,cx
   787 00000520 81EF0100                    sub     di,1     ;di=r-1
   788 00000524 BA0000                      mov     dx,0    ;dx ser� a vari�vel x. cx � a variavel y
   789                                      
   790                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   791                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   792                                  ;valores positivos para d
   793                                  
   794                                  stay_full:              ;loop
   795 00000527 89FE                        mov     si,di
   796 00000529 81FE0000                    cmp     si,0
   797 0000052D 7F0E                        jg      inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   798 0000052F 89D6                        mov     si,dx       ;o jl � importante porque trata-se de conta com sinal
   799 00000531 D1E6                        sal     si,1        ;multiplica por doi (shift arithmetic left)
   800 00000533 81C60300                    add     si,3
   801 00000537 01F7                        add     di,si     ;nesse ponto d=d+2*dx+3
   802 00000539 42                          inc     dx      ;incrementa dx
   803 0000053A E90E00                      jmp     plotar_full
   804                                  inf_full:   
   805 0000053D 89D6                        mov     si,dx
   806 0000053F 29CE                        sub     si,cx       ;faz x - y (dx-cx), e salva em di 
   807 00000541 D1E6                        sal     si,1
   808 00000543 81C60500                    add     si,5
   809 00000547 01F7                        add     di,si       ;nesse ponto d=d+2*(dx-cx)+5
   810 00000549 42                          inc     dx      ;incrementa x (dx)
   811 0000054A 49                          dec     cx      ;decrementa y (cx)
   812                                      
   813                                  plotar_full:    
   814 0000054B 89C6                        mov     si,ax
   815 0000054D 01CE                        add     si,cx
   816 0000054F 56                          push    si      ;coloca a abcisa y+xc na pilha          
   817 00000550 89DE                        mov     si,bx
   818 00000552 29D6                        sub     si,dx
   819 00000554 56                          push    si      ;coloca a ordenada yc-x na pilha
   820 00000555 89C6                        mov     si,ax
   821 00000557 01CE                        add     si,cx
   822 00000559 56                          push    si      ;coloca a abcisa y+xc na pilha  
   823 0000055A 89DE                        mov     si,bx
   824 0000055C 01D6                        add     si,dx
   825 0000055E 56                          push    si      ;coloca a ordenada yc+x na pilha    
   826 0000055F E85700                      call    line
   827                                      
   828 00000562 89C6                        mov     si,ax
   829 00000564 01D6                        add     si,dx
   830 00000566 56                          push    si      ;coloca a abcisa xc+x na pilha          
   831 00000567 89DE                        mov     si,bx
   832 00000569 29CE                        sub     si,cx
   833 0000056B 56                          push    si      ;coloca a ordenada yc-y na pilha
   834 0000056C 89C6                        mov     si,ax
   835 0000056E 01D6                        add     si,dx
   836 00000570 56                          push    si      ;coloca a abcisa xc+x na pilha  
   837 00000571 89DE                        mov     si,bx
   838 00000573 01CE                        add     si,cx
   839 00000575 56                          push    si      ;coloca a ordenada yc+y na pilha    
   840 00000576 E84000                      call    line
   841                                      
   842 00000579 89C6                        mov     si,ax
   843 0000057B 29D6                        sub     si,dx
   844 0000057D 56                          push    si      ;coloca a abcisa xc-x na pilha          
   845 0000057E 89DE                        mov     si,bx
   846 00000580 29CE                        sub     si,cx
   847 00000582 56                          push    si      ;coloca a ordenada yc-y na pilha
   848 00000583 89C6                        mov     si,ax
   849 00000585 29D6                        sub     si,dx
   850 00000587 56                          push    si      ;coloca a abcisa xc-x na pilha  
   851 00000588 89DE                        mov     si,bx
   852 0000058A 01CE                        add     si,cx
   853 0000058C 56                          push    si      ;coloca a ordenada yc+y na pilha    
   854 0000058D E82900                      call    line
   855                                      
   856 00000590 89C6                        mov     si,ax
   857 00000592 29CE                        sub     si,cx
   858 00000594 56                          push    si      ;coloca a abcisa xc-y na pilha          
   859 00000595 89DE                        mov     si,bx
   860 00000597 29D6                        sub     si,dx
   861 00000599 56                          push    si      ;coloca a ordenada yc-x na pilha
   862 0000059A 89C6                        mov     si,ax
   863 0000059C 29CE                        sub     si,cx
   864 0000059E 56                          push    si      ;coloca a abcisa xc-y na pilha  
   865 0000059F 89DE                        mov     si,bx
   866 000005A1 01D6                        add     si,dx
   867 000005A3 56                          push    si      ;coloca a ordenada yc+x na pilha    
   868 000005A4 E81200                      call    line
   869                                      
   870 000005A7 39D1                        cmp     cx,dx
   871 000005A9 7203                        jb      fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
   872 000005AB E979FF                      jmp     stay_full       ;se cx (y) est� acima de dx (x), continua no loop
   873                                      
   874                                      
   875                                  fim_full_circle:
   876 000005AE 5F                          pop     di
   877 000005AF 5E                          pop     si
   878 000005B0 5A                          pop     dx
   879 000005B1 59                          pop     cx
   880 000005B2 5B                          pop     bx
   881 000005B3 58                          pop     ax
   882 000005B4 9D                          popf
   883 000005B5 5D                          pop     bp
   884 000005B6 C20600                      ret     6
   885                                  ;-----------------------------------------------------------------------------
   886                                  ;
   887                                  ;   fun��o line
   888                                  ;
   889                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
   890                                  line:
   891 000005B9 55                          push        bp
   892 000005BA 89E5                        mov     bp,sp
   893 000005BC 9C                          pushf                        ;coloca os flags na pilha
   894 000005BD 50                          push        ax
   895 000005BE 53                          push        bx
   896 000005BF 51                          push        cx
   897 000005C0 52                          push        dx
   898 000005C1 56                          push        si
   899 000005C2 57                          push        di
   900 000005C3 8B460A                      mov     ax,[bp+10]   ; resgata os valores das coordenadas
   901 000005C6 8B5E08                      mov     bx,[bp+8]    ; resgata os valores das coordenadas
   902 000005C9 8B4E06                      mov     cx,[bp+6]    ; resgata os valores das coordenadas
   903 000005CC 8B5604                      mov     dx,[bp+4]    ; resgata os valores das coordenadas
   904 000005CF 39C8                        cmp     ax,cx
   905 000005D1 7408                        je      line2
   906 000005D3 721C                        jb      line1
   907 000005D5 91                          xchg        ax,cx
   908 000005D6 87DA                        xchg        bx,dx
   909 000005D8 E91600                      jmp     line1
   910                                  line2:      ; deltax=0
   911 000005DB 39D3                        cmp     bx,dx  ;subtrai dx de bx
   912 000005DD 7202                        jb      line3
   913 000005DF 87DA                        xchg        bx,dx        ;troca os valores de bx e dx entre eles
   914                                  line3:  ; dx > bx
   915 000005E1 50                          push        ax
   916 000005E2 53                          push        bx
   917 000005E3 E811FE                      call        plot_xy
   918 000005E6 39D3                        cmp     bx,dx
   919 000005E8 7503                        jne     line31
   920 000005EA E9C600                      jmp     fim_line
   921 000005ED 43                      line31:     inc     bx
   922 000005EE E9F0FF                      jmp     line3
   923                                  ;deltax <>0
   924                                  line1:
   925                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
   926                                      ; cx > ax
   927 000005F1 51                          push        cx
   928 000005F2 29C1                        sub     cx,ax
   929 000005F4 890E[0600]                  mov     [deltax],cx
   930 000005F8 59                          pop     cx
   931 000005F9 52                          push        dx
   932 000005FA 29DA                        sub     dx,bx
   933 000005FC 7702                        ja      line32
   934 000005FE F7DA                        neg     dx
   935                                  line32:     
   936 00000600 8916[0800]                  mov     [deltay],dx
   937 00000604 5A                          pop     dx
   938                                  
   939 00000605 50                          push        ax
   940 00000606 A1[0600]                    mov     ax,[deltax]
   941 00000609 3B06[0800]                  cmp     ax,[deltay]
   942 0000060D 58                          pop     ax
   943 0000060E 724D                        jb      line5
   944                                  
   945                                      ; cx > ax e deltax>deltay
   946 00000610 51                          push        cx
   947 00000611 29C1                        sub     cx,ax
   948 00000613 890E[0600]                  mov     [deltax],cx
   949 00000617 59                          pop     cx
   950 00000618 52                          push        dx
   951 00000619 29DA                        sub     dx,bx
   952 0000061B 8916[0800]                  mov     [deltay],dx
   953 0000061F 5A                          pop     dx
   954                                  
   955 00000620 89C6                        mov     si,ax
   956                                  line4:
   957 00000622 50                          push        ax
   958 00000623 52                          push        dx
   959 00000624 56                          push        si
   960 00000625 29C6                        sub     si,ax   ;(x-x1)
   961 00000627 A1[0800]                    mov     ax,[deltay]
   962 0000062A F7EE                        imul        si
   963 0000062C 8B36[0600]                  mov     si,[deltax]     ;arredondar
   964 00000630 D1EE                        shr     si,1
   965                                  ; se numerador (DX)>0 soma se <0 subtrai
   966 00000632 81FA0000                    cmp     dx,0
   967 00000636 7C09                        jl      ar1
   968 00000638 01F0                        add     ax,si
   969 0000063A 81D20000                    adc     dx,0
   970 0000063E E90600                      jmp     arc1
   971 00000641 29F0                    ar1:        sub     ax,si
   972 00000643 81DA0000                    sbb     dx,0
   973                                  arc1:
   974 00000647 F73E[0600]                  idiv        word [deltax]
   975 0000064B 01D8                        add     ax,bx
   976 0000064D 5E                          pop     si
   977 0000064E 56                          push        si
   978 0000064F 50                          push        ax
   979 00000650 E8A4FD                      call        plot_xy
   980 00000653 5A                          pop     dx
   981 00000654 58                          pop     ax
   982 00000655 39CE                        cmp     si,cx
   983 00000657 745A                        je      fim_line
   984 00000659 46                          inc     si
   985 0000065A E9C5FF                      jmp     line4
   986                                  
   987 0000065D 39D3                    line5:      cmp     bx,dx
   988 0000065F 7203                        jb      line7
   989 00000661 91                          xchg        ax,cx
   990 00000662 87DA                        xchg        bx,dx
   991                                  line7:
   992 00000664 51                          push        cx
   993 00000665 29C1                        sub     cx,ax
   994 00000667 890E[0600]                  mov     [deltax],cx
   995 0000066B 59                          pop     cx
   996 0000066C 52                          push        dx
   997 0000066D 29DA                        sub     dx,bx
   998 0000066F 8916[0800]                  mov     [deltay],dx
   999 00000673 5A                          pop     dx
  1000 00000674 89DE                        mov     si,bx
  1001                                  line6:
  1002 00000676 52                          push        dx
  1003 00000677 56                          push        si
  1004 00000678 50                          push        ax
  1005 00000679 29DE                        sub     si,bx   ;(y-y1)
  1006 0000067B A1[0600]                    mov     ax,[deltax]
  1007 0000067E F7EE                        imul        si
  1008 00000680 8B36[0800]                  mov     si,[deltay]     ;arredondar
  1009 00000684 D1EE                        shr     si,1
  1010                                  ; se numerador (DX)>0 soma se <0 subtrai
  1011 00000686 81FA0000                    cmp     dx,0
  1012 0000068A 7C09                        jl      ar2
  1013 0000068C 01F0                        add     ax,si
  1014 0000068E 81D20000                    adc     dx,0
  1015 00000692 E90600                      jmp     arc2
  1016 00000695 29F0                    ar2:        sub     ax,si
  1017 00000697 81DA0000                    sbb     dx,0
  1018                                  arc2:
  1019 0000069B F73E[0800]                  idiv        word [deltay]
  1020 0000069F 89C7                        mov     di,ax
  1021 000006A1 58                          pop     ax
  1022 000006A2 01C7                        add     di,ax
  1023 000006A4 5E                          pop     si
  1024 000006A5 57                          push        di
  1025 000006A6 56                          push        si
  1026 000006A7 E84DFD                      call        plot_xy
  1027 000006AA 5A                          pop     dx
  1028 000006AB 39D6                        cmp     si,dx
  1029 000006AD 7404                        je      fim_line
  1030 000006AF 46                          inc     si
  1031 000006B0 E9C3FF                      jmp     line6
  1032                                  
  1033                                  fim_line:
  1034 000006B3 5F                          pop     di
  1035 000006B4 5E                          pop     si
  1036 000006B5 5A                          pop     dx
  1037 000006B6 59                          pop     cx
  1038 000006B7 5B                          pop     bx
  1039 000006B8 58                          pop     ax
  1040 000006B9 9D                          popf
  1041 000006BA 5D                          pop     bp
  1042 000006BB C20800                      ret     8
  1043                                  
  1044                                  rect:
  1045 000006BE 55                          push        bp
  1046 000006BF 89E5                        mov     bp,sp
  1047 000006C1 9C                          pushf                        ;coloca os flags na pilha
  1048 000006C2 50                          push        ax
  1049 000006C3 53                          push        bx
  1050 000006C4 51                          push        cx
  1051 000006C5 52                          push        dx
  1052 000006C6 56                          push        si
  1053 000006C7 57                          push        di
  1054                                      ; resgata os valores das coordenadas
  1055 000006C8 8B460A                      mov     ax,[bp+10]   ; x1
  1056 000006CB 8B5E08                      mov     bx,[bp+8]    ; y1
  1057 000006CE 8B4E06                      mov     cx,[bp+6]    ; x2
  1058 000006D1 8B5604                      mov     dx,[bp+4]    ; y2
  1059                                  fill:
  1060 000006D4 50                          push ax       ; x1
  1061 000006D5 53                          push bx       ; y
  1062 000006D6 51                          push cx       ; x2
  1063 000006D7 53                          push bx       ; y
  1064 000006D8 E8DEFE                      call line     ; Desenhar uma linha horizontal
  1065                                  
  1066 000006DB 43                          inc bx        ; Próxima linha vertical
  1067 000006DC 39D3                        cmp bx, dx    ; Se chegou ao limite inferior, parar
  1068 000006DE 7EF4                        jle fill
  1069                                  
  1070                                      ; Restaurar o estado original
  1071 000006E0 5F                          pop di
  1072 000006E1 5E                          pop si
  1073 000006E2 5A                          pop dx
  1074 000006E3 59                          pop cx
  1075 000006E4 5B                          pop bx
  1076 000006E5 58                          pop ax
  1077 000006E6 9D                          popf
  1078 000006E7 5D                          pop bp
  1079 000006E8 C20800                      ret 8
  1080                                      
  1081                                  delay: ; Esteja atento pois talvez seja importante salvar contexto (no caso, CX, o que NÃO foi feito aqui).
  1082 000006EB 51                          push cx
  1083 000006EC 8B0E[1800]                  mov cx, word [velocidade] ; Carrega “velocidade” em cx (contador para loop)
  1084                                  del2:
  1085 000006F0 51                          push cx ; Coloca cx na pilha para usa-lo em outro loop
  1086 000006F1 B90005                      mov cx, 0500h ; Teste modificando este valor
  1087                                  del1:
  1088 000006F4 E2FE                        loop del1 ; No loop del1, cx é decrementado até que volte a ser zero
  1089 000006F6 59                          pop cx ; Recupera cx da pilha
  1090 000006F7 E2F7                        loop del2 ; No loop del2, cx é decrementado até que seja zero
  1091 000006F9 59                          pop cx
  1092 000006FA C3                          ret
  1093                                  
  1094                                  ;*******************************************************************
  1095                                  segment data
  1096                                  
  1097 00000000 0F                      cor     db      branco_intenso
  1098                                  
  1099                                  ;   I R G B COR
  1100                                  ;   0 0 0 0 preto
  1101                                  ;   0 0 0 1 azul
  1102                                  ;   0 0 1 0 verde
  1103                                  ;   0 0 1 1 cyan
  1104                                  ;   0 1 0 0 vermelho
  1105                                  ;   0 1 0 1 magenta
  1106                                  ;   0 1 1 0 marrom
  1107                                  ;   0 1 1 1 branco
  1108                                  ;   1 0 0 0 cinza
  1109                                  ;   1 0 0 1 azul claro
  1110                                  ;   1 0 1 0 verde claro
  1111                                  ;   1 0 1 1 cyan claro
  1112                                  ;   1 1 0 0 rosa
  1113                                  ;   1 1 0 1 magenta claro
  1114                                  ;   1 1 1 0 amarelo
  1115                                  ;   1 1 1 1 branco intenso
  1116                                  
  1117                                  preto       equ     0
  1118                                  azul        equ     1
  1119                                  verde       equ     2
  1120                                  cyan        equ     3
  1121                                  vermelho    equ     4
  1122                                  magenta     equ     5
  1123                                  marrom      equ     6
  1124                                  branco      equ     7
  1125                                  cinza       equ     8
  1126                                  azul_claro  equ     9
  1127                                  verde_claro equ     10
  1128                                  cyan_claro  equ     11
  1129                                  rosa        equ     12
  1130                                  magenta_claro   equ     13
  1131                                  amarelo     equ     14
  1132                                  branco_intenso  equ     15
  1133                                  
  1134 00000001 00                      modo_anterior   db      0
  1135 00000002 0000                    linha       dw          0
  1136 00000004 0000                    coluna      dw          0
  1137 00000006 0000                    deltax      dw      0
  1138 00000008 0000                    deltay      dw      0   
  1139 0000000A 46756E63616F204772-     mens        db          'Funcao Grafica'
  1140 00000013 6166696361         
  1141                                  
  1142 00000018 0100                    velocidade  dw      1
  1143 0000001A 0300                    vx          dw      3
  1144 0000001C 0300                    vy          dw      3
  1145 0000001E 0000                    saved_vx    dw      0
  1146 00000020 0000                    saved_vy    dw      0
  1147                                  
  1148 00000022 54726162616C686F20-     title           db      'Trabalho 1 de Programacao de Sistemas Embarcados 2024/1 '
  1149 0000002B 312064652050726F67-
  1150 00000034 72616D6163616F2064-
  1151 0000003D 652053697374656D61-
  1152 00000046 7320456D6261726361-
  1153 0000004F 646F7320323032342F-
  1154 00000058 3120               
  1155 0000005A 56696B746F72206520-     stats           db      'Viktor e Felipe 00 x 00 Computador                      '
  1156 00000063 46656C697065203030-
  1157 0000006C 207820303020436F6D-
  1158 00000075 70757461646F722020-
  1159 0000007E 202020202020202020-
  1160 00000087 202020202020202020-
  1161 00000090 2020               
  1162 00000092 47616D65204F766572-     fim           db        'Game Over reiniciar? (y/n)'
  1163 0000009B 207265696E69636961-
  1164 000000A4 723F2028792F6E29   
  1165                                  
  1166 000000AC 01                      vel_display db 1
  1167 000000AD 3124                    texto_vel_display db '1','$'
  1168                                  
  1169 000000AF 0E01                    x_barra dw 270      ;posição inicial 
  1170 000000B1 7201                    x_barra_end dw 370  ;posição final
  1171 000000B3 2800                    y_barra dw  40   ;
  1172                                  
  1173 000000B5 00                      unidades_jogador db 0
  1174 000000B6 00                      dezenas_jogador db 0
  1175                                  
  1176 000000B7 00                      unidades_computador db 0
  1177 000000B8 00                      dezenas_computador db 0
  1178                                  
  1179 000000B9 3024                    texto_pontos_jogador db '0','$'
  1180 000000BB 3024                    texto_pontos_computador db '0','$'
  1181                                  
  1182                                  ;*************************************************************************
  1183                                  segment stack stack
  1184 00000000 <res 00000200>                      resb        512
  1185                                  stacktop:
